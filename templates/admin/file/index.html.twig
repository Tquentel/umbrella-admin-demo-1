{% extends "@UmbrellaAdmin/layout.html.twig" %}

{% block content %}
    {{ nav_config('pills', {'active_strategy': 'first'}) }}
    {{ nav_start() }}
        {{ nav_item({'label' : 'Exemple', 'url' : '#exemple'}) }}
        {{ nav_item({'label' : 'How to', 'url': '#how-to'}) }}
    {{ nav_end() }}

    <div class="tab-content">
        <div class="tab-pane active" id="exemple">
            {% include "admin/file/_example.html.twig" with {
                'title' : '<h4>Fichier servi par le controller <code>UmbrellaFileController::downloadAction</code></h4>',
                'source_config' : 'admin/file/_exampe_config_1.txt',
                'file' : entity.wallpaperFile,
                'form' : wallpaper_form
            } %}

            {% include "admin/file/_example.html.twig" with {
                'title' : '<h4>Fichier servi par le controller <code>App/Controller/Admin/FileController::downloadAction</code></h4>',
                'source_config' : 'admin/file/_exampe_config_2.txt',
                'file' : entity.billFile,
                'form' : bill_form
            } %}
        </div>

        <div class="tab-pane" id="how-to">
            <div class="card">
                <div class="card-header">
                    <h4>Le composant UmbrellaFile</h4>
                </div>
                <div class="card-body">

                    <h4 class="card-title">L'entité UmbrellaFile</h4>
                    <p>
                        Un fichier sera toujours représenté par l'entité <code>UmbrellaFile</code>.
                        Si une entité possède un ou plusieurs fichiers, il faudra utiliser une relation doctrine :
                    </p>
                    <pre class="border-dark border p-2">{{ source('admin/file/_doctrine_relation.txt') }}</pre>

                    <p>Il existe alors 2 façon d'uploader un nouveau fichier :</p>
                    <h5>1 - Via un formulaire symfony :</h5>
                    <pre class="border-dark border p-2">{{ source('admin/file/_create_from_form.txt') }}</pre>

                    <h5>2 - Via un fichier existant sur le disque :</h5>
                    <pre class="border-dark border p-2">{{ source('admin/file/_create_from_path.txt') }}</pre>

                    <br><br>

                    <h4 class="card-title">Stockage des fichiers</h4>
                    <p>
                        Le <code>FileStorage</code> Umbrella utilise <a href="https://flysystem.thephpleague.com/v1/docs/" target="_blank" class="text-primary">l'Api flysystem v1</a>.
                        Il est possible de choisir le storage flySystem utilisé par Umbrella dans le fichier de configuration <code>/config/packages/umbrella.yaml</code>
                        (<b>default.storage</b> par défaut) :
                    </p>
                    <pre class="border-dark border p-2">{{ source('admin/file/_umbrellafile_storage_config.txt') }}</pre>

                    <p>
                        Il faut ensuite configurer le flysytem dans <code>/config/packages/flysystem.yaml</code> -
                        <a href="https://github.com/thephpleague/flysystem-bundle/blob/1.x/docs/B-configuration-reference.md" class="text-primary" target="_blank">Configuration reference</a> :
                    </p>
                    <pre class="border-dark border p-2">{{ source('admin/file/_flysystem_config.txt') }}</pre>

                    <p class="alert alert-info">
                        Si vous utilisez liip image, il faut aussi préciser dans la configuration, le storage flysystem utilisé :
                    </p>
                    <pre class="border-dark border p-2">{{ source('admin/file/_liip_imagine_config.txt') }}</pre>


                    <br><br>

                    <h4 class="card-title">Générer les urls</h4>
                    <p>Url d'un fichier</p>
                    {% verbatim %}<pre class="border-dark border p-2">{{ umbrella_file | file_url }}</pre>{% endverbatim %}
                    {% verbatim %}<pre class="border-dark border p-2">$fileHelper->getUrl($umbrellaFile)</pre>{% endverbatim %}
                    <p>Url d'une vignette (liip_imagine doit être correctement configuré avec flysystem) : </p>
                    {% verbatim %}<pre class="border-dark border p-2">{{ umbrella_file | image_url('my_filter') }}</pre>{% endverbatim %}
                    {% verbatim %}<pre class="border-dark border p-2">$fileHelper->getImageUrl($umbrellaFile, 'my_filter')</pre>{% endverbatim %}


                    <br><br>

                    <h4 class="card-title">Servir et organiser les fichiers</h4>

                    <p>
                        Chaque entité <code>UmbrellaFile</code> à un attribut <code>mappingStorage</code>. Cette valeur determine le répertoire de stockage de votre fichier, ainsi que l'url
                        sur lequel votre fichier sera servi.<br>
                        Par exemple si mon objet <code>$umbrellaFile->mappingStorage</code> à la valeur <b>custom.mapping</b> alors il utilisera la mapping suivant définit dans la configuration :
                    </p>
                    <pre class="border-dark border p-2">{{ source('admin/file/_mapping_config.txt') }}</pre>


                    <p class="alert-info alert">
                        Le mapping Id peut être définit avec l'option <code>mapping</code> dans le formulaire, ou avec le paramètre <code>$mapping</code>
                        dans la méthode <code>UmbrellaFile::createFromPath(...)</code>.
                    </p>
                </div>
            </div>
        </div>
    </div>
{% endblock %}